clear
format compact
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% %%%%%%%%%%%%%%%%%%%%% Params settings START %%%%%%%%%%%%%%%%%%%%%%%%%%%
%% load the desired mus and TT parameters of different particle diameters
static_particle_diameter = 4; % mu_m
dynamic_particle_diameter = 6; % mu_m
%% Simulation settings
SAVEON      = 1;        % 1 = save myname_T.bin, myname_H.mci
myname      = 'infi';% name for files: myname_T.bin, myname_H.mci
Nphotons    = 15000;      	% number of photons
Nx          = 400;    	% # of bins in each dimension of cube
Ny          = 400;    	% # of bins in each dimension of cube
Nz          = 200;    	% # of bins in each dimension of cube
binsize     = 0.001;     	% size of each bin, eg. [cm]
dx = binsize;
dy = binsize;
dz = binsize;
x  = ([0:Nx]'-Nx/2)*dx;
y  = ([0:Ny]'-Ny/2)*dy;
z  = [0:Nz]'*dz;
zmin = min(z);
zmax = max(z);
xmin = min(x);
xmax = max(x);
%% Simulation settings
% Set source and detection parameters
radius      = 0.2; % Half width of the BScan
Ndetectors  = 512; % Number of Aline per BScan, 1 for Aline simulation
beamw = 0.2; % Beam width on the objective lens
flens = 3.6; % Focal length
cos_accept  = cos(atan(beamw/2/flens)); % Max cos of the accepted angle
z_focus = 0.08; % Physics focal depth
zsurf = 0.0000;  % position of surface
p  = 0.5; % Bias scattering parameter
samplePoints = 1024; % Number of wavelength sampling
lam_begin = 1250e-7; % cm
lam_end = 1350e-7; % cm
lam = linspace(lam_begin,lam_end,samplePoints); % wavelengths
nm = 1.33; % Medium refractive index
%% %%%%%%%%%%%%%%%%%%%%% Params settings DONE %%%%%%%%%%%%%%%%%%%%%%%%%%%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Load parameters generated by mus_gen.m and TT_para_gen.m
mus_static = load(['parameters/mus_',num2str(static_particle_diameter),'_1300.mat']).mus; % scattering coefficient of static particles
mus_dynamic = load(['parameters/mus_',num2str(dynamic_particle_diameter),'_1300.mat']).mus; % scattering coefficient of dynamic particles
r_static = load(['parameters/r_',num2str(static_particle_diameter),'_1300.mat']).r; % efficient particle radius of static particles
r_dynamic = load(['parameters/r_',num2str(dynamic_particle_diameter),'_1300.mat']).r; % efficient particle radius of dynamic particles
SPF_static = load(['parameters/parameters_',num2str(static_particle_diameter),'.txt']); % TT SPF parameters of 4 mu_m diameter particles
SPF_dynamic = load(['parameters/parameters_',num2str(dynamic_particle_diameter),'.txt']); % TT SPF parameters of 6 mu_m diameter particles
%% Create Sample
% Here use medium number = 5 as the dynamic blood;medium number = 4 as the static vessel wall;
% The same number-types are used in the .c file
% If you want to change the type number, please remember to change the numbers in the .c file.
Nt = 9; %% Number of mediums
num_vessel = input(['How many vessels :']); % Number of vessels
vessel_center_xaxis_all = zeros(num_vessel,1);% cm, Vessel center x position
vessel_center_zaxis_all = zeros(num_vessel,1);% cm, Vessel center z position
vessel_radius_all = zeros(num_vessel,1);% cm, vessel radius: include the flow and the wall
blood_radius_all = zeros(num_vessel,1);% cm, flow radius
%%% Set structures
for i = 1:num_vessel
    disp(['------------No.',num2str(i),' vessel paramters setting------------'])
    vessel_center_xaxis_all(i) = input(['No.',num2str(i),' vessel_center x-axis (cm):']);% cm
    vessel_center_zaxis_all(i) = input(['No.',num2str(i),' vessel_center z-axis (cm):']);% cm
    vessel_radius_all(i) = input(['No.',num2str(i),' vessel_radius (cm):']);% cm
    blood_radius_all(i) = input(['No.',num2str(i),' blood_radius (cm):']);% cm
end
save('particle_dir/vessel_information.mat', 'vessel_center_xaxis_all', 'vessel_center_zaxis_all','vessel_radius_all','blood_radius_all');

for jj=1:samplePoints % Every wavelength needs a independent file
    disp(['wavelength No.',num2str(jj),'generated.'])
    myname = ['infi',num2str(jj)];
    waist  = (lam(jj)/nm)/pi/(beamw/2/flens); % Waist of the beam
    zr = pi*waist^2/(lam(jj)/nm); % Rayleigh distance of the beam
    det_radius = waist*sqrt(1+(z_focus/zr)^2); % Waist at the launching plane
    for i=1:Nt
        if i == 4
            nrv(i) = nm; % refraction index (set uniform for every medium)
            muav(i) = 0; % absorption coefficient
            musv(i)= mus_static(jj); % scattering coefficient
            gv(i) = 0.9; % anisotropy (not used)
            gf(i) = SPF_static(jj,1); % forward anisotropy for TT SPF
            gb(i) = SPF_static(jj,2); % backward anisotropy for TT SPF
            alf(i) = SPF_static(jj,3); % forward enhancing for TT SPF
            alb(i) = SPF_static(jj,4); % backward enhancing for TT SPF
            C(i) = SPF_static(jj,5); % balance factor for TT SPF
            r(i) = r_static(jj); %efficient r
        elseif i==5
            nrv(i) = nm; % refraction index (set uniform for every medium)
            muav(i) = 0; % absorption coefficient
            musv(i)= mus_dynamic(jj); % scattering coefficient
            gv(i) = 0.9; % anisotropy (not used)
            gf(i) = SPF_dynamic(jj,1); % forward anisotropy for TT SPF
            gb(i) = SPF_dynamic(jj,2); % backward anisotropy for TT SPF
            alf(i) = SPF_dynamic(jj,3); % forward enhancing for TT SPF
            alb(i) = SPF_dynamic(jj,4); % backward enhancing for TT SPF
            C(i) = SPF_dynamic(jj,5); % balance factor for TT SPF
            r(i) = r_dynamic(jj); %efficient r
        else
            nrv(i) = nm;
            muav(i) = 0; % absorption coefficient
            musv(i)= 0; % scattering coefficient
            gv(i) = 0; % anisotropy (not used)
            gf(i) = 0; % forward anisotropy for TT SPF
            gb(i) = 0; % backward anisotropy for TT SPF
            alf(i) = 0; % forward enhancing for TT SPF
            alb(i) = 0; % backward enhancing for TT SPF
            C(i) = 0; % balance factor for TT SPF
            r(i) = 0; %efficient r
        end
    end
    T = double(zeros(Ny,Nx,Nz));
    T = T + 1; % Background water
    
    for id_vessel = 1:num_vessel
        for iz=1:Nz % for every depth z(iz)
            xc      = vessel_center_xaxis_all(id_vessel);  % center of blood vessel
            zc      = vessel_center_zaxis_all(id_vessel);  % center of blood vessel
            whole_radius  = vessel_radius_all(id_vessel);  % vessel radius
            vessel_radius  = blood_radius_all(id_vessel);  % blood radius
            for ix=1:Nx
                xd = x(ix) - xc;	% vessel, x distance from vessel center
                zd = z(iz) - zc;   	% vessel, z distance from vessel center
                rr  = sqrt(xd^2 + zd^2);	% r from vessel center
                if (rr<=whole_radius)     	% if r is within vessel
                    T(:,ix,iz) =4; % vessel wall
                end
            end %ix
            for ix=1:Nx
                xd = x(ix) - xc;	% vessel, x distance from vessel center
                zd = z(iz) - zc;   	% vessel, z distance from vessel center
                rr  = sqrt(xd^2 + zd^2);	% r from vessel center
                if (rr<=vessel_radius)     	% if r is within vessel
                    T(:,ix,iz) =5; % blood
                end
                
            end %ix
        end % iz
    end
    
    
    %%
    if SAVEON
        tic
        % convert T to linear array of integer values, v(i)i = 0;
        if jj==1
            v = uint8(reshape(T,Ny*Nx*Nz,1));
        end
        %% WRITE FILES
        % Write myname_H.mci file
        %   which contains the Monte Carlo simulation parameters
        %   and specifies the tissue optical properties for each tissue type.
        commandwindow
        disp(sprintf('--------create %s --------',myname))
        filename = sprintf('%s_H.mci',['settings/',myname]);
        fid = fopen(filename,'w');
        % run parameters
        fprintf(fid,'%0.2f\n',Nphotons);
        fprintf(fid,'%0.4f\n',p);
        fprintf(fid,'%0.4f\n',Ndetectors);
        fprintf(fid,'%0.6f\n',det_radius);
        fprintf(fid,'%0.6f\n',cos_accept);
        fprintf(fid,'%d\n'   ,Nx);
        fprintf(fid,'%d\n'   ,Ny);
        fprintf(fid,'%d\n'   ,Nz);
        fprintf(fid,'%0.4f\n',dx);
        fprintf(fid,'%0.4f\n',dy);
        fprintf(fid,'%0.4f\n',dz);
        % launch parameters
        fprintf(fid,'%0.4f\n',radius);
        fprintf(fid,'%0.4f\n',zsurf);
        % tissue optical properties
        fprintf(fid,'%d\n',Nt);
        for i=1:Nt
            fprintf(fid,'%0.6f\n',muav(i));
            fprintf(fid,'%0.6f\n',musv(i));
            fprintf(fid,'%0.6f\n',gv(i));
            fprintf(fid,'%0.6f\n',nrv(i));
            fprintf(fid,'%0.6f\n',gf(i));
            fprintf(fid,'%0.6f\n',gb(i));
            fprintf(fid,'%0.6f\n',alf(i));
            fprintf(fid,'%0.6f\n',alb(i));
            fprintf(fid,'%0.6f\n',C(i));
            fprintf(fid,'%0.6f\n',r(i));
        end
        fprintf(fid,'%0.4f\n',z_focus);
        fprintf(fid,'%0.4f\n',waist);
        fprintf(fid,'%0.4f\n',zr);
        fclose(fid);
        
        %% write myname_T.bin file
        if jj==1
            filename = sprintf('%s_T.bin',['settings/',myname]);
            disp(['create ' filename])
            fid = fopen(filename,'wb');
            fwrite(fid,v,'uint8');
            fclose(fid);
        end
        toc
    end % SAVEON
end
%% Look at structure of Tzx at iy=Ny/2
Txzy = shiftdim(T,1);   % Tyxz --> Txzy
Tzx  = Txzy(:,:,Ny/2)'; % Tzx

%%
figure('color', 'white'); clf
sz = 12;  fz = 10;
imagesc(x,z,Tzx,[1 Nt])
hold on
set(gca,'fontsize',sz)
xlabel('x [cm]')
ylabel('z [cm]')
title('\rm Tissue')
colorbar
cmap = makecmap(Nt);
colormap(cmap)
set(colorbar,'fontsize',1)
% label colorbar
zdiff = zmax-zmin;
%%%
text(xmax,zmin - zdiff*0.06, 'Tissue types','fontsize',fz)
axis equal image
axis([xmin xmax zmin zmax])

savefig(strcat(['settings/',myname], '.fig'));
disp('done')


